name: MLS NEXT RSS Scraper

on:
  schedule:
    # Run every 30 minutes during active hours (6 AM - 12 AM ET = 10 AM - 4 AM UTC)
    - cron: "*/30 10-23,0-3 * * *"
    # Run hourly during overnight hours (12 AM - 6 AM ET = 4 AM - 10 AM UTC)
    - cron: "0 4-9 * * *"
  workflow_dispatch: # Allow manual triggers

jobs:
  scrape-and-deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 5 # Prevent long-running jobs

    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"
          cache: "pip" # Cache pip dependencies

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          pip install --cache-dir ~/.cache/pip -r requirements.txt

      - name: Run scraper
        run: |
          python mls_next_scraper.py

      - name: Checkout RSS branch for comparison
        run: |
          # Clone the RSS branch to compare content
          git clone --branch rss-feeds --single-branch https://github.com/${{ github.repository }}.git ../rss-feeds-checkout || echo "Branch doesn't exist yet"

      - name: Check if RSS content changed
        id: check_changes
        run: |
          # Use the external Python script for content comparison
          OUTPUT=$(python scripts/check_content_changes.py output/mls_next_news.xml ../rss-feeds-checkout/mls_next_news.xml)

          # Parse the output and set GitHub output variables
          echo "$OUTPUT" | while IFS= read -r line; do
              if [[ $line == new_hash=* ]]; then
                  echo "$line" >> $GITHUB_OUTPUT
              elif [[ $line == prev_hash=* ]]; then
                  echo "$line" >> $GITHUB_OUTPUT
              elif [[ $line == changed=* ]]; then
                  echo "$line" >> $GITHUB_OUTPUT
              elif [[ $line == reason=* ]]; then
                  echo "$line" >> $GITHUB_OUTPUT
              elif [[ $line == added_count=* ]]; then
                  echo "$line" >> $GITHUB_OUTPUT
              elif [[ $line == removed_count=* ]]; then
                  echo "$line" >> $GITHUB_OUTPUT
              elif [[ $line == modified_count=* ]]; then
                  echo "$line" >> $GITHUB_OUTPUT
              fi
          done

          # Also log the full output for debugging
          echo "Full output:"
          echo "$OUTPUT"

      - name: Log change details
        run: |
          echo "=== Change Detection Summary ==="
          echo "Changed: ${{ steps.check_changes.outputs.changed }}"
          echo "Reason: ${{ steps.check_changes.outputs.reason }}"
          echo "New Hash: ${{ steps.check_changes.outputs.new_hash }}"
          if [ "${{ steps.check_changes.outputs.prev_hash }}" != "" ]; then
            echo "Previous Hash: ${{ steps.check_changes.outputs.prev_hash }}"
          fi
          if [ "${{ steps.check_changes.outputs.added_count }}" != "" ]; then
            echo "Added Articles: ${{ steps.check_changes.outputs.added_count }}"
          fi
          if [ "${{ steps.check_changes.outputs.removed_count }}" != "" ]; then
            echo "Removed Articles: ${{ steps.check_changes.outputs.removed_count }}"
          fi
          if [ "${{ steps.check_changes.outputs.modified_count }}" != "" ]; then
            echo "Modified Articles: ${{ steps.check_changes.outputs.modified_count }}"
          fi
          echo "================================"

      - name: Display detailed article changes
        if: steps.check_changes.outputs.changed == 'true'
        run: |
          echo "=== DETAILED ARTICLE CHANGES ==="
          echo "Running detailed change analysis..."

          # Run the change detection script again to get detailed output
          python scripts/check_content_changes.py output/mls_next_news.xml ../rss-feeds-checkout/mls_next_news.xml

          echo "================================="

      - name: Deploy to RSS branch
        if: steps.check_changes.outputs.changed == 'true'
        run: |
          # Configure git
          git config --global user.name 'RSS Bot'
          git config --global user.email 'action@github.com'

          # Create or checkout RSS branch
          git checkout -B rss-feeds

          # Remove all files except RSS output
          find . -mindepth 1 -not -path './.git*' -not -path './output*' -delete

          # Move RSS files to root of branch
          mv output/mls_next_news.xml ./
          mv output/mls_next_articles.json ./

          # Add timestamp and metadata
          echo "# MLS NEXT RSS Feeds" > README.md
          echo "" >> README.md
          echo "**Last updated:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> README.md
          echo "" >> README.md
          echo "## Available Feeds" >> README.md
          echo "" >> README.md
          echo "- **RSS Feed:** [mls_next_news.xml](./mls_next_news.xml)" >> README.md
          echo "- **JSON Data:** [mls_next_articles.json](./mls_next_articles.json)" >> README.md
          echo "" >> README.md
          echo "## Direct Links" >> README.md
          echo "" >> README.md
          echo "- RSS: \`https://mattbanks.github.io/mls-next-news-scraper/mls_next_news.xml\`" >> README.md
          echo "- JSON: \`https://mattbanks.github.io/mls-next-news-scraper/mls_next_articles.json\`" >> README.md

          # Commit and push
          git add .
          git commit -m "Update RSS feeds - $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          git push origin rss-feeds --force

          echo "✅ RSS feeds deployed to rss-feeds branch"

      - name: Log deployment status
        run: |
          if [ "${{ steps.check_changes.outputs.changed }}" = "true" ]; then
            echo "✅ RSS feeds updated and deployed"
            echo "📡 RSS URL: https://mattbanks.github.io/mls-next-news-scraper/mls_next_news.xml"
            echo "📊 JSON URL: https://mattbanks.github.io/mls-next-news-scraper/mls_next_articles.json"
          else
            echo "ℹ️ No changes detected, skipping deployment"
          fi
